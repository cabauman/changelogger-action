name: Release

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: Prerelease tag (optional)
        required: false
        type: string
        default: ''
      release-as:
        required: true
        type: choice
        default: auto
        description: If you want an automated or a manual version bump
        options:
          - auto
          - major
          - minor
          - patch

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Version bump
        env:
          PRERELEASE: ${{ github.event.inputs.prerelease }}
          RELEASE_AS: ${{ github.event.inputs.release-as }}
        run: >
          npx standard-version --skip.changelog 
          ${{ env.PRERELEASE != '' && format('--prerelease {0}', env.PRERELEASE) || '' }}
          ${{ env.RELEASE_AS != 'auto' && format('--release-as {0}', env.RELEASE_AS) || '' }}

      - name: Get latest tag
        id: get-latest-tag
        run: echo "VERSION_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        uses: ./
        with:
          is-conventional: true
          preamble: What's changed?

      - name: Get previous version
        id: get-previous-version
        run: |
          previous_version=$(git describe --tags --abbrev=0 $VERSION_TAG^)
          echo "previous-version=$previous_version" >> $GITHUB_ENV

      - name: Commit changes
        run: |
          git push origin $VERSION_TAG
          git push origin main

      - name: Upsert release
        uses: actions/github-script@v6.1.0
        env:
          PREVIOUS_VERSION: ${{ steps.get-previous-version.outputs.previous-version }}
          RELEASE_NAME: $VERSION_TAG
          PRERELEASE: ${{ github.event.inputs.prerelease != '' }}
          BODY: ${{ steps.changelog.outputs.changelog }}
        with:
          script: |
            const { PREVIOUS_VERSION, RELEASE_NAME, PRERELEASE, BODY } = process.env
            const { owner, repo } = context.repo
            const { data } = await github.rest.repos.listReleases({ owner, repo, per_page: 1 })
            const release = data.length > 0 ? data[0] : undefined
            let updateExisting = false
            if (release?.prerelease === true) {
              const regex = /^(v[0-9]+\.[0-9]+\.[0-9]+)-.*$/
              const match = regex.exec(PREVIOUS_VERSION)
              if (match) {
                const previousBaseVersion = match[1]
                updateExisting = release.tag_name.startsWith(previousBaseVersion)
              }
            }
            if (updateExisting) {
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: release.id,
                prerelease: PRERELEASE === 'true',
                name: RELEASE_NAME,
                tag_name: RELEASE_NAME,
                body: BODY,
              })
            } else {
              await github.rest.repos.createRelease({
                owner,
                repo,
                prerelease: PRERELEASE === 'true',
                name: RELEASE_NAME,
                tag_name: RELEASE_NAME,
                body: BODY,
              })
            }
