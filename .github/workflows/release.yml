name: Release

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: Prerelease tag (optional)
        required: false
        type: string
        default: ''
      release-as:
        required: true
        type: choice
        default: auto
        description: If you want an automated or a manual version bump
        options:
          - auto
          - major
          - minor
          - patch

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Version bump
        env:
          prerelease: ${{ github.event.inputs.prerelease }}
          release-as: ${{ github.event.inputs.release-as }}
        run: >
          npx standard-version --skip.changelog 
          ${{ env.prerelease != '' && format('--prerelease {0}', env.prerelease) || '' }}
          ${{ env.release-as != 'auto' && format('--release-as {0}', env.release-as) || '' }}

      - name: Get latest tag
        id: get-latest-tag
        run: echo ::set-output name=version-tag::$(git describe --tags --abbrev=0)

      - name: Generate changelog
        id: changelog
        uses: ./
        with:
          is-conventional: true
          preamble: What's changed?

      - name: Commit changes
        env:
          version-tag: ${{ steps.get-latest-tag.outputs.version-tag }}
        run: |
          git push origin ${{ env.version-tag }}
          git push origin main

      - name: Get base version
        id: get-base-version
        env:
          version-tag: ${{ steps.get-latest-tag.outputs.version-tag }}
        run: |
          export base-version=$(${{ env.version-tag }} | grep -Po 'v[0-9]+\.[0-9]+\.[0-9]+(?=-[0-9]+)?')
          echo ::set-output name=base-version::$base-version

      - name: Upsert release
        uses: actions/github-script@v4
        env:
          BASE_VERSION: ${{ steps.get-latest-tag.outputs.get-base-version }}
          RELEASE_NAME: ${{ steps.get-latest-tag.outputs.version-tag }}
          PRERELEASE: ${{ github.event.inputs.prerelease != '' }}
          BODY: ${{ steps.changelog.outputs.commit-list }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { BASE_VERSION, RELEASE_NAME, PRERELEASE, BODY } = process.env
            const { owner, repo } = context.repo
            const { data: { id, tag_name } } = await github.repos.getLatestRelease({ owner, repo })
            if (tag_name.startsWith(BASE_VERSION)) {
              await github.repos.updateRelease({
                owner,
                repo,
                release_id: id,
                prerelease: PRERELEASE === 'true',
                name: RELEASE_NAME,
                tag_name: RELEASE_NAME,
                body: BODY,
              })
            } else {
              await github.repos.createRelease({
                owner,
                repo,
                prerelease: PRERELEASE === 'true',
                name: RELEASE_NAME,
                tag_name: RELEASE_NAME,
                body: BODY,
              })
            }
